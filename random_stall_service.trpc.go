// Code generated by trpc-go/trpc-go-cmdline v2.8.55. DO NOT EDIT.
// source: random_stall_service.proto








package easydinning



import (
	"context"
	"fmt"

   	_ "git.code.oa.com/trpc-go/trpc-go"
   	_ "git.code.oa.com/trpc-go/trpc-go/http"
    "git.code.oa.com/trpc-go/trpc-go/server"
    "git.code.oa.com/trpc-go/trpc-go/client"
    "git.code.oa.com/trpc-go/trpc-go/codec"
)

// START ======================================= Server Service Definition ======================================= START



// RandomStallServiceService defines service.
type RandomStallServiceService interface {
	
    GetBuildings(ctx context.Context, req *GetBuildingsReq) (*GetBuildingsRsp, error) 
	
    GetStalls(ctx context.Context, req *GetStallsReq) (*GetStallsRsp, error) 
}



func RandomStallServiceService_GetBuildings_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
    req := &GetBuildingsReq{}
	filters, err := f(req)
    if err != nil {
    	return nil, err
    }
    handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(RandomStallServiceService).GetBuildings(ctx, reqbody.(*GetBuildingsReq))
	}
    
    var rsp interface{}
    rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}


func RandomStallServiceService_GetStalls_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
    req := &GetStallsReq{}
	filters, err := f(req)
    if err != nil {
    	return nil, err
    }
    handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(RandomStallServiceService).GetStalls(ctx, reqbody.(*GetStallsReq))
	}
    
    var rsp interface{}
    rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}






// RandomStallServiceServer_ServiceDesc descriptor for server.RegisterService.
var RandomStallServiceServer_ServiceDesc = server.ServiceDesc {
    ServiceName: "trpc.easy_dinning.random_stalls.RandomStallService",
    HandlerType: ((*RandomStallServiceService)(nil)),
    Methods: []server.Method{
            {
                Name: "/trpc.easy_dinning.random_stalls.RandomStallService/GetBuildings",
                Func: RandomStallServiceService_GetBuildings_Handler,
                
            },
            {
                Name: "/trpc.easy_dinning.random_stalls.RandomStallService/GetStalls",
                Func: RandomStallServiceService_GetStalls_Handler,
                
            },
    },
}

// RegisterRandomStallServiceService registers service.
func RegisterRandomStallServiceService(s server.Service, svr RandomStallServiceService) {
    if err := s.Register(&RandomStallServiceServer_ServiceDesc, svr); err != nil {
        panic(fmt.Sprintf("RandomStallService register error:%v", err))
    }
}



// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedRandomStallService struct {}


func (s *UnimplementedRandomStallService) GetBuildings(ctx context.Context, req *GetBuildingsReq) (*GetBuildingsRsp, error) {
    return nil, errors.New("rpc GetBuildings of service RandomStallService is not implemented")
}
func (s *UnimplementedRandomStallService) GetStalls(ctx context.Context, req *GetStallsReq) (*GetStallsRsp, error) {
    return nil, errors.New("rpc GetStalls of service RandomStallService is not implemented")
}


// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START




// RandomStallServiceClientProxy defines service client proxy
type RandomStallServiceClientProxy interface {
   	
    GetBuildings(ctx context.Context, req *GetBuildingsReq, opts ...client.Option) (rsp *GetBuildingsRsp, err error) 
    
    
   	
    GetStalls(ctx context.Context, req *GetStallsReq, opts ...client.Option) (rsp *GetStallsRsp, err error) 
    
    
}

type RandomStallServiceClientProxyImpl struct{
    client client.Client
    opts []client.Option
}

var NewRandomStallServiceClientProxy = func(opts...client.Option) RandomStallServiceClientProxy {
    return &RandomStallServiceClientProxyImpl {client: client.DefaultClient, opts: opts}
}




func (c *RandomStallServiceClientProxyImpl) GetBuildings(ctx context.Context, req *GetBuildingsReq, opts ...client.Option) (*GetBuildingsRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
    defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.easy_dinning.random_stalls.RandomStallService/GetBuildings")
	msg.WithCalleeServiceName(RandomStallServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("easy_dinning")
	msg.WithCalleeServer("random_stalls")
	msg.WithCalleeService("RandomStallService")
	msg.WithCalleeMethod("GetBuildings")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
    rsp := &GetBuildingsRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
	    return nil, err
	}
	return rsp, nil
}








func (c *RandomStallServiceClientProxyImpl) GetStalls(ctx context.Context, req *GetStallsReq, opts ...client.Option) (*GetStallsRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
    defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.easy_dinning.random_stalls.RandomStallService/GetStalls")
	msg.WithCalleeServiceName(RandomStallServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("easy_dinning")
	msg.WithCalleeServer("random_stalls")
	msg.WithCalleeService("RandomStallService")
	msg.WithCalleeMethod("GetStalls")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
    rsp := &GetStallsRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
	    return nil, err
	}
	return rsp, nil
}








// END ======================================= Client Service Definition ======================================= END
